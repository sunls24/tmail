// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
	"tmail/ent/attachment"
	"tmail/ent/envelope"
	"tmail/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	attachmentFields := schema.Attachment{}.Fields()
	_ = attachmentFields
	// attachmentDescFilename is the schema descriptor for filename field.
	attachmentDescFilename := attachmentFields[1].Descriptor()
	// attachment.FilenameValidator is a validator for the "filename" field. It is called by the builders before save.
	attachment.FilenameValidator = attachmentDescFilename.Validators[0].(func(string) error)
	// attachmentDescFilepath is the schema descriptor for filepath field.
	attachmentDescFilepath := attachmentFields[2].Descriptor()
	// attachment.FilepathValidator is a validator for the "filepath" field. It is called by the builders before save.
	attachment.FilepathValidator = attachmentDescFilepath.Validators[0].(func(string) error)
	// attachmentDescContentType is the schema descriptor for contentType field.
	attachmentDescContentType := attachmentFields[3].Descriptor()
	// attachment.ContentTypeValidator is a validator for the "contentType" field. It is called by the builders before save.
	attachment.ContentTypeValidator = attachmentDescContentType.Validators[0].(func(string) error)
	// attachmentDescID is the schema descriptor for id field.
	attachmentDescID := attachmentFields[0].Descriptor()
	// attachment.IDValidator is a validator for the "id" field. It is called by the builders before save.
	attachment.IDValidator = func() func(string) error {
		validators := attachmentDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	envelopeFields := schema.Envelope{}.Fields()
	_ = envelopeFields
	// envelopeDescTo is the schema descriptor for to field.
	envelopeDescTo := envelopeFields[0].Descriptor()
	// envelope.ToValidator is a validator for the "to" field. It is called by the builders before save.
	envelope.ToValidator = envelopeDescTo.Validators[0].(func(string) error)
	// envelopeDescFrom is the schema descriptor for from field.
	envelopeDescFrom := envelopeFields[1].Descriptor()
	// envelope.FromValidator is a validator for the "from" field. It is called by the builders before save.
	envelope.FromValidator = envelopeDescFrom.Validators[0].(func(string) error)
	// envelopeDescSubject is the schema descriptor for subject field.
	envelopeDescSubject := envelopeFields[2].Descriptor()
	// envelope.DefaultSubject holds the default value on creation for the subject field.
	envelope.DefaultSubject = envelopeDescSubject.Default.(string)
	// envelopeDescContent is the schema descriptor for content field.
	envelopeDescContent := envelopeFields[3].Descriptor()
	// envelope.DefaultContent holds the default value on creation for the content field.
	envelope.DefaultContent = envelopeDescContent.Default.(string)
	// envelopeDescCreatedAt is the schema descriptor for created_at field.
	envelopeDescCreatedAt := envelopeFields[4].Descriptor()
	// envelope.DefaultCreatedAt holds the default value on creation for the created_at field.
	envelope.DefaultCreatedAt = envelopeDescCreatedAt.Default.(func() time.Time)
}
